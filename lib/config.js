// Generated by CoffeeScript 1.4.0
(function() {
  var Config, Environment, KnownPath, assert, fs, logger, path, yaml,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Environment = require('./environment');

  KnownPath = require('./known_path');

  path = require('path');

  fs = require('fs');

  assert = require('assert');

  yaml = require('js-yaml');

  logger = require('winston');

  Config = (function() {

    function Config() {}

    Config.query_files = function() {
      var pattern;
      pattern = path.join(KnownPath.config, '*.yaml');
      return this.file_names = fs.readdirSync(pattern);
    };

    Config.sanitize = function() {
      assert(this.file_names && this.file_names.length > 0, "No configuration files found");
      return assert(__indexOf.call(this.file_names, 'db.yaml') >= 0, "Database configuration file (db.yaml) not found");
    };

    Config.load_yaml = function(file_name) {
      var doc, file_path, yaml_content;
      file_path = path.join(KnownPath.config, file_name);
      yaml_content = fs.readFileSync(file_path, 'utf8');
      try {
        doc = yaml.safeLoad(yaml_content);
      } catch (e) {
        logger.error(e);
        logger.error("Failed to parse '" + file_name + "' file content");
        process.exit(1);
      }
      assert(doc && doc[Environment.current], "Configuration file '" + file_name + "' requires '" + Environment.current + "' environment configuration to be specified.");
      return doc;
    };

    Config.announce = function() {
      var attribute, doc, file_name, v, _i, _len, _ref, _results;
      _ref = this.file_names;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file_name = _ref[_i];
        doc = this.load_yaml(file_name);
        _results.push((function() {
          var _ref1, _results1;
          _ref1 = doc[Environment.current];
          _results1 = [];
          for (attribute in _ref1) {
            v = _ref1[attribute];
            _results1.push(this[attribute] = v);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Config.initialize = function() {
      this.query_files();
      this.sanitize();
      return this.announce();
    };

    return Config;

  })();

  module["export"] = Config;

}).call(this);
