// Generated by CoffeeScript 1.4.0
(function() {
  var CLI, Command, Commander, Completer, CreateFriendshipCommand, ListFriendsCommand, QuitCommand, RemoveFriendshipCommand, SocialCoffee, Thrift, readline,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Thrift = require('./thrift/client');

  SocialCoffee = require('./version');

  readline = require('readline');

  Commander = require('commander');

  Completer = (function() {
    var COMPLETIONS;

    function Completer() {}

    COMPLETIONS = {
      friends: ['list'],
      friendship: ['create', 'remove'],
      quit: []
    };

    Completer.prototype.complete = function(line) {
      var commands, hits, line_part, suggestions;
      commands = line.trim().split(/\s+/i);
      if (commands.length === 2) {
        if (COMPLETIONS[commands[0]]) {
          hits = COMPLETIONS[commands[0]].filter(function(c) {
            return c.indexOf(commands[1]) === 0;
          });
          suggestions = hits.length > 0 ? hits : COMPLETIONS[commands[0]];
        } else {
          suggestions = [];
        }
        line_part = commands[1];
      } else if (commands.length === 1 && line[line.length - 1] === ' ') {
        suggestions = COMPLETIONS[commands[0]] ? COMPLETIONS[commands[0]] : [];
        line_part = commands[0];
      } else if (commands.length === 1) {
        hits = Object.keys(COMPLETIONS).filter(function(c) {
          return c.indexOf(commands[0]) === 0;
        });
        suggestions = hits.length > 0 ? hits : Object.keys(COMPLETIONS);
        line_part = commands[0];
      }
      return [suggestions, line_part];
    };

    return Completer;

  })();

  Command = (function() {

    function Command(context) {
      this.context = context;
    }

    Command.prototype.execute = function(commands) {
      return console.log(commands);
    };

    return Command;

  })();

  QuitCommand = (function(_super) {

    __extends(QuitCommand, _super);

    function QuitCommand() {
      return QuitCommand.__super__.constructor.apply(this, arguments);
    }

    QuitCommand.prototype.execute = function(commands) {
      console.log("bye bye ...");
      return this.context.close();
    };

    return QuitCommand;

  })(Command);

  ListFriendsCommand = (function(_super) {

    __extends(ListFriendsCommand, _super);

    function ListFriendsCommand() {
      return ListFriendsCommand.__super__.constructor.apply(this, arguments);
    }

    ListFriendsCommand.prototype.execute = function(commands) {
      var id;
      if (commands.length === 3) {
        id = parseInt(commands[2]);
        return Thrift.Client.client.get_friends(id, function(err, friends) {
          return console.log(friends);
        });
      }
    };

    return ListFriendsCommand;

  })(Command);

  CreateFriendshipCommand = (function(_super) {

    __extends(CreateFriendshipCommand, _super);

    function CreateFriendshipCommand() {
      return CreateFriendshipCommand.__super__.constructor.apply(this, arguments);
    }

    CreateFriendshipCommand.prototype.execute = function(commands) {
      var usera, userb;
      if (commands.length === 4) {
        usera = parseInt(commands[2]);
        userb = parseInt(commands[3]);
        return Thrift.Client.client.create_friendship(usera, userb, function(err, created) {
          return console.log("friendship newely created: " + created);
        });
      }
    };

    return CreateFriendshipCommand;

  })(Command);

  RemoveFriendshipCommand = (function(_super) {

    __extends(RemoveFriendshipCommand, _super);

    function RemoveFriendshipCommand() {
      return RemoveFriendshipCommand.__super__.constructor.apply(this, arguments);
    }

    RemoveFriendshipCommand.prototype.execute = function(commands) {
      var usera, userb;
      if (commands.length === 4) {
        usera = parseInt(commands[2]);
        userb = parseInt(commands[3]);
        return Thrift.Client.client.remove_friendship(usera, userb, function(err, removed) {
          return console.log("friendship just removed: " + removed);
        });
      }
    };

    return RemoveFriendshipCommand;

  })(Command);

  CLI = (function() {

    function CLI() {
      this.completer = new Completer;
    }

    CLI.prototype.start = function(args) {
      var cmd_options, options, prompt,
        _this = this;
      Commander.version("Social Coffee v" + SocialCoffee.version + " '" + SocialCoffee.codename + "'").option('-p, --port <n>', 'Port number', parseInt).option('-h, --host [host]', 'Host number', 'localhost').parse(args);
      options = {};
      options['host'] = Commander.host || 'localhost';
      options['port'] = Commander.port || 9090;
      Thrift.Client.connect(options.host, options.port);
      cmd_options = {
        input: process.stdin,
        output: process.stdout,
        completer: this.completer.complete
      };
      this.cmd_interface = readline.createInterface(cmd_options);
      prompt = "" + options.host + ":" + options.port + ">";
      this.cmd_interface.setPrompt(prompt, prompt.length);
      this.cmd_interface.on('SIGINT', function() {
        return _this.cmd_interface.question('Are you sure you want to exit? [yes|no] ', function(answer) {
          if (answer.match(/^y(es)?$/i)) {
            new QuitCommand(_this.cmd_interface).execute();
          }
          return _this.cmd_interface.prompt();
        });
      });
      this.cmd_interface.on('line', function(line) {
        var commands;
        commands = line.trim().split(/\s+/i);
        switch (commands[0]) {
          case "friends":
            if (commands.length > 1 && commands[1] === 'list') {
              new ListFriendsCommand(_this.cmd_interface).execute(commands);
            }
            break;
          case "friendship":
            if (commands.length > 1) {
              switch (commands[1]) {
                case 'create':
                  new CreateFriendshipCommand(_this.cmd_interface).execute(commands);
                  break;
                case 'remove':
                  new RemoveFriendshipCommand(_this.cmd_interface).execute(commands);
              }
            }
            break;
          case "quit":
            new QuitCommand(_this.cmd_interface).execute(commands);
            break;
          default:
            if (line.trim().length > 0) {
              console.log('command unknown');
            }
        }
        return _this.cmd_interface.prompt();
      });
      this.cmd_interface.on('close', function() {
        Thrift.Client.close();
        return process.exit(0);
      });
      return this.cmd_interface.prompt();
    };

    return CLI;

  })();

  module.exports = CLI;

}).call(this);
