// Generated by CoffeeScript 1.4.0
(function() {
  var Database, Environment, assert, logger, redis;

  Environment = require('./environment');

  assert = require('assert');

  logger = require('winston');

  redis = require('redis');

  Database = (function() {

    function Database() {}

    Database.connected = false;

    Database.connection = null;

    Database.config = null;

    Database.url = null;

    Database.current_db = function() {
      if ((Database.config != null) && (Database.config.database != null)) {
        return Database.config.database;
      } else {
        return 0;
      }
    };

    Database.check_config = function(config) {
      assert(config, "This function requires config");
      assert(config.host && typeof config.host === 'string', "host configuration is invalid or missing");
      assert(config.port && typeof config.port === 'number' && config.port >= 0, "port configuration is invalid or missing");
      if (config.database != null) {
        assert(typeof config.database === 'number', "Redis database index must be a number");
        assert(config.database >= 0, "Redis database index must be greater than or equal to 0");
      }
      if (config.password != null) {
        assert(typeof config.password === 'string', "Redis auth password must be a string");
        return assert(config.password.length > 0, "Redis auth password must be of length greater than 0");
      }
    };

    Database.connect = function(config, callback) {
      var options;
      if (Database.connected) {
        return;
      }
      Database.check_config(config);
      Database.url = "tcp://" + config.host + ":" + config.port;
      logger.info("Connecting to redis instance at " + Database.url + " ...");
      options = {
        parser: 'hiredis'
      };
      if (config.password != null) {
        options['auth_pass'] = config.password;
      }
      Database.connection = redis.createClient(config.port, config.host, options);
      Database.config = config;
      Database.connection.debug_mode = Environment.debug;
      Database.connection.on('connect', function() {
        Database.connected = true;
        logger.info("Connection to redis store at " + Database.url + " established");
        logger.info("Remote redis store version '" + Database.connection.server_info.redis_version + "' running on '" + Database.connection.server_info.os + "' OS.");
        if (config.database != null) {
          logger.info("Changing redis db to " + config.database + " ...");
          return Database.connection.select(config.database, function(err, response) {
            if (err) {
              logger.error("Failed to change db to " + config.database + " due to errror. Falling back to db 0.", {
                error: err.toString()
              });
            }
            return callback(this.connnection);
          });
        } else {
          logger.info("Connected to redis db 0");
          return callback(Database.connection);
        }
      });
      Database.connection.on('end', function() {
        Database.connected = false;
        return logger.warn("Connection to redis store at " + Database.url + " closed.");
      });
      Database.connection.on('error', function(err) {
        return logger.error("Error occurred during redis operation", {
          error: err.toString()
        });
      });
      return Database.connection.on('drain', function() {
        return logger.info("TCP connection to redis store at " + Database.url + " is now writable again.");
      });
    };

    Database.close = function(callback) {
      if (!Database.connected) {
        return;
      }
      logger.info("Closing connection to redis store at " + Database.url + " ...");
      return Database.connection.quit();
    };

    Database.drop = function(callback) {
      assert(Database.connected, "Connection to the redis store not established.");
      logger.warn("Dropping current db " + (Database.current_db()) + " at " + Database.url);
      return Database.connection.flushdb(function(err, response) {
        logger.error("Could not drop current db " + (this.current_db()) + " due to error", {
          error: err.toString()
        });
        return callback(err);
      });
    };

    Database.drop_all = function(callback) {
      assert(Database.connected, "Connection to the redis store not established");
      logger.warn("Droping all databases at " + Database.url + ".");
      return Database.connection.flushall(function(err, response) {
        logger.error("Could not drop all database due to error", {
          error: err.toString()
        });
        return callback(err);
      });
    };

    return Database;

  }).call(this);

  module.exports = Database;

}).call(this);
