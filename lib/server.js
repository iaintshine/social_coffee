// Generated by CoffeeScript 1.4.0
(function() {
  var Config, Database, Environment, KnownPath, Logger, Server, SocialCoffee, Thrift, assert, fs, logger, path;

  fs = require('fs');

  path = require('path');

  logger = require('winston');

  assert = require('assert');

  SocialCoffee = require('./version');

  Environment = require('./environment');

  KnownPath = require('./known_path');

  Logger = require('./logger');

  Config = require('./config');

  Database = require('./db');

  Thrift = require('./thrift/server');

  Server = (function() {

    function Server() {
      this.stop = false;
      this.pid_path = path.join(KnownPath.pids, 'server.pid');
      logger.info("Server instance has just been constructed");
    }

    Server.prototype.store_pid = function() {
      if (!fs.existsSync(KnownPath.tmp)) {
        fs.mkdirSync(KnownPath.tmp);
      }
      if (!fs.existsSync(KnownPath.pids)) {
        fs.mkdirSync(KnownPath.pids);
      }
      return fs.writeFileSync(this.pid_path, process.pid);
    };

    Server.prototype.remove_pid = function() {
      if (fs.existsSync(this.pid_path)) {
        return fs.unlinkSync(this.pid_path);
      }
    };

    Server.prototype.register_signal_handler = function() {
      var _this = this;
      process.on('SIGTERM', function() {
        return _this.stop();
      });
      process.on('SIGINT', function() {
        return _this.stop();
      });
      return process.on('exit', function(code) {
        return logger.info("Exiting " + (code !== 0 ? "abnormally" : "normally") + " with code " + code);
      });
    };

    Server.prototype.start = function(options) {
      assert(options, "This function requires options");
      assert((options.port != null) && typeof options.port === 'number' && options.port >= 0, "port configuration is invalid or missing");
      logger.info("Social Coffee v" + SocialCoffee.version + " '" + SocialCoffee.codename + "' orchestrating the show");
      Logger.initialize();
      Config.initialize();
      Database.connect(Config.db);
      this.store_pid();
      logger.info("Process PID " + process.pid + " stored in " + this.pid_path);
      this.thrift_server = new Thrift.Server;
      return this.thrift_server.start(options, function() {
        return logger.info("All things are set up!");
      });
    };

    Server.prototype.stop = function() {
      var _this = this;
      return this.thrift_server.stop(function() {
        logger.info("We are shutting down!");
        Database.close();
        return _this.remove_pid();
      });
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);
