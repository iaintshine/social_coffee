// Generated by CoffeeScript 1.4.0
(function() {
  var Database, Friendship, logger;

  Database = require('./db');

  logger = require('winston');

  Friendship = (function() {

    function Friendship() {}

    Friendship.connect = function() {
      return Database.connection;
    };

    Friendship.key = function(id) {
      return "user:" + id + ":friends";
    };

    Friendship.sanitize_argument = function(arg) {
      if (arg == null) {
        return new TypeError("function argument must not be null");
      }
      if (typeof arg !== 'number') {
        return new TypeError("function argument is not a number");
      }
      if (arg < 0) {
        return new RangeError("function argumenst is not a positive number");
      }
      return null;
    };

    Friendship.create = function(usera, userb, callback) {
      var error;
      error = Friendship.sanitize_argument(usera);
      if (error) {
        if (callback) {
          callback(error);
        }
        return;
      }
      error = Friendship.sanitize_argument(userb);
      if (error) {
        if (callback) {
          callback(error);
        }
        return;
      }
      return Friendship.connect().multi().sadd(Friendship.key(usera), userb).sadd(Friendship.key(userb), usera).exec(function(err, replies) {
        var created;
        if ((err != null) && err.length > 0) {
          logger.error("Friendship#create failed with some errors", {
            errors: err.toString()
          });
          if (callback) {
            callback(err[0]);
          }
          return;
        }
        if (callback) {
          created = replies && replies[0] > 0;
          return callback(null, created);
        }
      });
    };

    Friendship.remove = function(usera, userb, callback) {
      var error;
      error = this.sanitize_argument(usera);
      if (error) {
        if (callback) {
          callback(error);
        }
        return;
      }
      error = this.sanitize_argument(userb);
      if (error) {
        if (callback) {
          callback(error);
        }
        return;
      }
      return this.connect().multi().srem(this.key(usera), userb).srem(this.key(userb), usera).exec(function(err, replies) {
        var removed;
        if ((err != null) && err.length > 0) {
          logger.error("Friendship#remove failed with some errors", {
            errors: err.toString()
          });
          if (callback) {
            callback(err[0]);
          }
          return;
        }
        if (callback) {
          removed = replies && replies[0] > 0;
          return callback(null, removed);
        }
      });
    };

    Friendship.select = function(user, callback) {
      var error;
      error = this.sanitize_argument(usera);
      if (error) {
        if (callback) {
          callback(error);
        }
        return;
      }
      if (!callback) {
        return;
      }
      return this.connect().smembers(this.key(user), function(err, values) {
        if (err) {
          logger.error("Friendship#select failed due to error", {
            error: err.toString()
          });
          return callback(err);
        } else {
          return callback(null, values);
        }
      });
    };

    return Friendship;

  }).call(this);

  module.exports = Friendship;

}).call(this);
