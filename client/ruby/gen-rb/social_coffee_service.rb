#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'facebook_service'
require 'social_coffee_service_types'

module SocialCoffee
  module Thrift
    module SocialCoffeeService
      class Client < ::FacebookService::Client 
        include ::Thrift::Client

        def ping()
          send_ping()
          return recv_ping()
        end

        def send_ping()
          send_message('ping', Ping_args)
        end

        def recv_ping()
          result = receive_message(Ping_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
        end

        def get_friends(id)
          send_get_friends(id)
          return recv_get_friends()
        end

        def send_get_friends(id)
          send_message('get_friends', Get_friends_args, :id => id)
        end

        def recv_get_friends()
          result = receive_message(Get_friends_result)
          return result.success unless result.success.nil?
          raise result.ex unless result.ex.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_friends failed: unknown result')
        end

        def create_friendship(usera, userb)
          send_create_friendship(usera, userb)
          return recv_create_friendship()
        end

        def send_create_friendship(usera, userb)
          send_message('create_friendship', Create_friendship_args, :usera => usera, :userb => userb)
        end

        def recv_create_friendship()
          result = receive_message(Create_friendship_result)
          return result.success unless result.success.nil?
          raise result.ex unless result.ex.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_friendship failed: unknown result')
        end

        def remove_friendship(usera, userb)
          send_remove_friendship(usera, userb)
          return recv_remove_friendship()
        end

        def send_remove_friendship(usera, userb)
          send_message('remove_friendship', Remove_friendship_args, :usera => usera, :userb => userb)
        end

        def recv_remove_friendship()
          result = receive_message(Remove_friendship_result)
          return result.success unless result.success.nil?
          raise result.ex unless result.ex.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remove_friendship failed: unknown result')
        end

      end

      class Processor < ::FacebookService::Processor 
        include ::Thrift::Processor

        def process_ping(seqid, iprot, oprot)
          args = read_args(iprot, Ping_args)
          result = Ping_result.new()
          result.success = @handler.ping()
          write_result(result, oprot, 'ping', seqid)
        end

        def process_get_friends(seqid, iprot, oprot)
          args = read_args(iprot, Get_friends_args)
          result = Get_friends_result.new()
          begin
            result.success = @handler.get_friends(args.id)
          rescue ::SocialCoffee::Thrift::SocialException => ex
            result.ex = ex
          end
          write_result(result, oprot, 'get_friends', seqid)
        end

        def process_create_friendship(seqid, iprot, oprot)
          args = read_args(iprot, Create_friendship_args)
          result = Create_friendship_result.new()
          begin
            result.success = @handler.create_friendship(args.usera, args.userb)
          rescue ::SocialCoffee::Thrift::SocialException => ex
            result.ex = ex
          end
          write_result(result, oprot, 'create_friendship', seqid)
        end

        def process_remove_friendship(seqid, iprot, oprot)
          args = read_args(iprot, Remove_friendship_args)
          result = Remove_friendship_result.new()
          begin
            result.success = @handler.remove_friendship(args.usera, args.userb)
          rescue ::SocialCoffee::Thrift::SocialException => ex
            result.ex = ex
          end
          write_result(result, oprot, 'remove_friendship', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Ping_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Ping_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_friends_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1

        FIELDS = {
          ID => {:type => ::Thrift::Types::I32, :name => 'id'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_friends_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        EX = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}},
          EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::SocialCoffee::Thrift::SocialException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_friendship_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        USERA = 1
        USERB = 2

        FIELDS = {
          USERA => {:type => ::Thrift::Types::I32, :name => 'usera'},
          USERB => {:type => ::Thrift::Types::I32, :name => 'userb'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Create_friendship_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        EX = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::SocialCoffee::Thrift::SocialException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Remove_friendship_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        USERA = 1
        USERB = 2

        FIELDS = {
          USERA => {:type => ::Thrift::Types::I32, :name => 'usera'},
          USERB => {:type => ::Thrift::Types::I32, :name => 'userb'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Remove_friendship_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        EX = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
          EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::SocialCoffee::Thrift::SocialException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
